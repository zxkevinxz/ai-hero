diff --git a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/api/chat/route.ts b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/api/chat/route.ts
index c3ded63..251022a 100644
--- a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/api/chat/route.ts
+++ b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/api/chat/route.ts
@@ -28,7 +28,7 @@ export async function POST(request: Request) {
 
   const body = (await request.json()) as {
     messages: Array<UIMessage>;
-    chatId?: string;
+    chatId: string;
   };
 
   const { messages, chatId } = body;
@@ -36,32 +36,26 @@ export async function POST(request: Request) {
   if (!messages.length) {
     return new Response("No messages provided", { status: 400 });
   }
+  // Verify the chat belongs to the user
+  const chat = await db.query.chats.findFirst({
+    where: eq(chats.id, chatId),
+  });
 
-  // If no chatId is provided, create a new chat with the user's message
-  let currentChatId = chatId;
-  if (!currentChatId) {
-    const newChatId = crypto.randomUUID();
-    await upsertChat({
-      userId: session.user.id,
-      chatId: newChatId,
-      title:
-        textPartsToContent(messages[messages.length - 1]!.parts).slice(0, 50) +
-        "...",
-      messages: messages, // Only save the user's message initially
-    });
-    currentChatId = newChatId;
-  } else {
-    // Verify the chat belongs to the user
-    const chat = await db.query.chats.findFirst({
-      where: eq(chats.id, currentChatId),
-    });
-    if (!chat || chat.userId !== session.user.id) {
-      return new Response("Chat not found or unauthorized", { status: 404 });
-    }
+  if (chat && chat.userId !== session.user.id) {
+    return new Response("Chat not found or unauthorized", { status: 404 });
   }
 
+  const chatResult = await upsertChat({
+    userId: session.user.id,
+    chatId,
+    title:
+      textPartsToContent(messages[messages.length - 1]!.parts).slice(0, 50) +
+      "...",
+    messages: messages, // Only save the user's message initially
+  });
+
   const trace = langfuse.trace({
-    sessionId: currentChatId,
+    sessionId: chatId,
     name: "chat",
     userId: session.user.id,
   });
@@ -69,11 +63,11 @@ export async function POST(request: Request) {
   const stream = createUIMessageStream({
     execute: async (dataStream) => {
       // If this is a new chat, send the chat ID to the frontend
-      if (!chatId) {
+      if (chatResult.status === "created") {
         dataStream.writer.write({
           type: "data-new-chat-created",
           data: {
-            chatId: currentChatId,
+            chatId,
           },
           transient: true,
         });
@@ -103,7 +97,7 @@ export async function POST(request: Request) {
       // Save the complete chat history
       await upsertChat({
         userId: session.user.id,
-        chatId: currentChatId,
+        chatId,
         title: textPartsToContent(lastMessage.parts).slice(0, 50) + "...",
         messages: updatedMessages,
       });
diff --git a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/chat.tsx b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/chat.tsx
index 036d698..e7c685c 100644
--- a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/chat.tsx
+++ b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/chat.tsx
@@ -25,20 +25,13 @@ export const ChatPage = ({
   const [showSignInModal, setShowSignInModal] = useState(false);
   const router = useRouter();
 
-  const chat = useMemo(() => {
-    return new Chat({
-      messages: initialMessages,
-      id: chatId,
-      transport: new DefaultChatTransport({
-        body: {
-          chatId,
-        },
-      }),
-    });
-  }, [initialMessages, chatId]);
-
   const { messages, sendMessage, status } = useChat<OurMessage>({
-    chat,
+    transport: new DefaultChatTransport({
+      body: {
+        chatId,
+      },
+    }),
+    messages: initialMessages,
     onData: (data) => {
       if (data.type === "data-new-chat-created") {
         router.push(`?id=${data.data.chatId}`);
diff --git a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/page.tsx b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/page.tsx
index e1e668c..72a8dc1 100644
--- a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/page.tsx
+++ b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/app/page.tsx
@@ -14,7 +14,7 @@ export default async function HomePage({
   const session = await auth();
   const userName = session?.user?.name ?? "Guest";
   const isAuthenticated = !!session?.user;
-  const { id: chatId } = await searchParams;
+  const { id: chatIdFromSearchParams } = await searchParams;
 
   // Fetch chats if user is authenticated
   const chats =
@@ -24,8 +24,11 @@ export default async function HomePage({
 
   // Fetch active chat if chatId is present and user is authenticated
   const activeChat =
-    chatId && isAuthenticated && session.user?.id
-      ? await getChat({ userId: session.user.id, chatId })
+    chatIdFromSearchParams && isAuthenticated && session.user?.id
+      ? await getChat({
+          userId: session.user.id,
+          chatId: chatIdFromSearchParams,
+        })
       : null;
 
   // Map the messages to the correct format for useChat
@@ -36,6 +39,8 @@ export default async function HomePage({
       parts: msg.parts as OurMessage["parts"],
     })) ?? [];
 
+  const backupChatId = crypto.randomUUID();
+
   return (
     <div className="flex h-screen bg-gray-950">
       {/* Sidebar */}
@@ -61,7 +66,7 @@ export default async function HomePage({
                 <Link
                   href={`/?id=${chat.id}`}
                   className={`flex-1 rounded-lg p-3 text-left text-sm text-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-400 ${
-                    chat.id === chatId
+                    chat.id === chatIdFromSearchParams
                       ? "bg-gray-700"
                       : "hover:bg-gray-750 bg-gray-800"
                   }`}
@@ -87,9 +92,10 @@ export default async function HomePage({
       </div>
 
       <ChatPage
+        key={chatIdFromSearchParams ?? backupChatId}
         userName={userName}
         isAuthenticated={isAuthenticated}
-        chatId={chatId}
+        chatId={chatIdFromSearchParams ?? backupChatId}
         initialMessages={initialMessages}
       />
     </div>
diff --git a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/server/db/queries.ts b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/server/db/queries.ts
index ba3cb5e..3d725fc 100644
--- a/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/server/db/queries.ts
+++ b/courses/01-deepsearch-in-typescript/00-apps/05-day-8-app/src/server/db/queries.ts
@@ -8,7 +8,7 @@ export const upsertChat = async (opts: {
   chatId: string;
   title: string;
   messages: UIMessage[];
-}) => {
+}): Promise<{ id: string; status: "created" | "updated" }> => {
   const { userId, chatId, title, messages: newMessages } = opts;
 
   // First, check if the chat exists and belongs to the user
@@ -43,7 +43,7 @@ export const upsertChat = async (opts: {
     })),
   );
 
-  return { id: chatId };
+  return { id: chatId, status: existingChat ? "updated" : "created" };
 };
 
 export const getChat = async (opts: { userId: string; chatId: string }) => {
